────────────
 Benchmarks
────────────
This is a generated summary file.

STOP! Before you read some random numbers, you should know what they mean.

1. The benchmarks here are on random input data, and not adversarial input data.
2. Absolute times mean very little. Do not assume this will the exact runtime on any online
   judge. Times are useful relative to each other and between changes to the same algorithm,
   when measured on the same system under similar conditions.
3. Haskell's lazy evaluation makes benchmarks a little complex. All benchmarks measure the
   time taken to evaluate a result fully, which can mean different things for different
   benchmarks. For example, if the benchmarked function returns a lazy list and it is not
   fully consumed, less time will be taken compared to the benchmark value. When a data
   structure is benchmarked, the benchmark has to measure the cost of constructing it, and
   the added cost of traversing it once to force its contents. This means that in practice
   it will take a little less time than the benchmark value.

For details about any benchmark see its source file.

AhoCorasick
┌───────────────────────┬──────────┬──────────┬──────────┐
│         Name          │   100    │  10000   │ 1000000  │
╞═══════════════════════╪══════════╪══════════╪══════════╡
│ build from few long   │ 8.513 μs │ 1.788 ms │ 235.9 ms │
├───────────────────────┼──────────┼──────────┼──────────┤
│ match few long        │ 2.299 μs │ 350.8 μs │ 36.57 ms │
├───────────────────────┼──────────┼──────────┼──────────┤
│ build from many short │ 7.621 μs │ 2.322 ms │ 597.8 ms │
├───────────────────────┼──────────┼──────────┼──────────┤
│ match many short      │ 1.416 μs │ 507.8 μs │ 139.6 ms │
└───────────────────────┴──────────┴──────────┴──────────┘

BFS
┌──────┬──────────┬──────────┬──────────┐
│ Name │   100    │  10000   │ 1000000  │
╞══════╪══════════╪══════════╪══════════╡
│ bfs  │ 1.365 μs │ 302.1 μs │ 273.3 ms │
└──────┴──────────┴──────────┴──────────┘

BinSearch
┌────────────┬──────────┬──────────┬──────────┐
│    Name    │   100    │  10000   │ 1000000  │
╞════════════╪══════════╪══════════╪══════════╡
│ binSearch  │ 809.2 ns │ 487.3 μs │ 72.74 ms │
├────────────┼──────────┼──────────┼──────────┤
│ binSearchA │ 8.671 μs │ 1.865 ms │ 583.7 ms │
└────────────┴──────────┴──────────┴──────────┘

CentroidDecomp
┌────────────────────┬──────────┬──────────┬──────────┐
│        Name        │   100    │  10000   │  200000  │
╞════════════════════╪══════════╪══════════╪══════════╡
│ centroidDecompose  │ 41.16 μs │ 17.62 ms │ 700.6 ms │
├────────────────────┼──────────┼──────────┼──────────┤
│ centroidDecomposeL │ 54.83 μs │ 24.50 ms │ 939.3 ms │
└────────────────────┴──────────┴──────────┴──────────┘

ConvexHull
┌────────────┬──────────┬──────────┬──────────┐
│    Name    │   100    │  10000   │  200000  │
╞════════════╪══════════╪══════════╪══════════╡
│ convexHull │ 12.75 μs │ 5.564 ms │ 321.7 ms │
└────────────┴──────────┴──────────┴──────────┘

Dinic
┌─────────────────┬──────────┬──────────┬──────────┐
│      Name       │   100    │  20000   │  100000  │
╞═════════════════╪══════════╪══════════╪══════════╡
│ dinic           │ 574.0 μs │ 361.2 ms │          │
├─────────────────┼──────────┼──────────┼──────────┤
│ dinic bipartite │ 33.69 μs │ 39.03 ms │ 646.8 ms │
└─────────────────┴──────────┴──────────┴──────────┘

DSU
┌─────────────────────┬──────────┬──────────┬──────────┐
│        Name         │   100    │  10000   │ 1000000  │
╞═════════════════════╪══════════╪══════════╪══════════╡
│ sameSetD and unionD │ 1.002 μs │ 169.1 μs │ 27.59 ms │
└─────────────────────┴──────────┴──────────┴──────────┘

Dijkstra
┌───────────┬──────────┬──────────┬──────────┐
│   Name    │   100    │  10000   │  500000  │
╞═══════════╪══════════╪══════════╪══════════╡
│ dijkstra  │ 4.523 μs │ 2.092 ms │ 484.8 ms │
├───────────┼──────────┼──────────┼──────────┤
│ dijkstraH │ 1.757 μs │ 1.102 ms │ 276.2 ms │
└───────────┴──────────┴──────────┴──────────┘

Fenwick
┌─────────────┬──────────┬──────────┬──────────┐
│    Name     │   100    │  10000   │ 1000000  │
╞═════════════╪══════════╪══════════╪══════════╡
│ fromListF   │ 3.220 μs │ 786.4 μs │ 94.63 ms │
├─────────────┼──────────┼──────────┼──────────┤
│ mappendF    │ 4.558 μs │ 2.475 ms │ 1.267 s  │
├─────────────┼──────────┼──────────┼──────────┤
│ foldPrefixF │ 1.627 μs │ 736.5 μs │ 110.7 ms │
└─────────────┴──────────┴──────────┴──────────┘

Floyd-Warshall
┌───────────────┬──────────┬──────────┐
│     Name      │   100    │   500    │
╞═══════════════╪══════════╪══════════╡
│ floydWarshall │ 3.081 ms │ 395.7 ms │
└───────────────┴──────────┴──────────┘

KMP
┌──────────────┬──────────┬──────────┬──────────┐
│     Name     │   100    │  10000   │ 1000000  │
╞══════════════╪══════════╪══════════╪══════════╡
│ prefixFuncBS │ 1.052 μs │ 104.9 μs │ 11.00 ms │
└──────────────┴──────────┴──────────┴──────────┘

Kruskal
┌─────────┬──────────┬──────────┬──────────┐
│  Name   │   100    │  10000   │  500000  │
╞═════════╪══════════╪══════════╪══════════╡
│ kruskal │ 11.36 μs │ 2.661 ms │ 413.2 ms │
└─────────┴──────────┴──────────┴──────────┘

LCA
┌──────────┬──────────┬──────────┬──────────┐
│   Name   │   100    │  10000   │  500000  │
╞══════════╪══════════╪══════════╪══════════╡
│ buildLCA │ 18.18 μs │ 8.242 ms │ 1.207 s  │
├──────────┼──────────┼──────────┼──────────┤
│ queryLCA │ 2.519 μs │ 376.0 μs │ 113.9 ms │
└──────────┴──────────┴──────────┴──────────┘

Mo
┌───────┬──────────┬──────────┬─────────┐
│ Name  │   100    │  10000   │ 200000  │
╞═══════╪══════════╪══════════╪═════════╡
│ runMo │ 26.86 μs │ 16.91 ms │ 1.268 s │
└───────┴──────────┴──────────┴─────────┘

PQTree
┌─────────────┬──────────┬──────────┐
│    Name     │   100    │   2000   │
╞═════════════╪══════════╪══════════╡
│ buildPQ     │ 966.4 ns │ 19.12 μs │
├─────────────┼──────────┼──────────┤
│ reduceAllPQ │ 699.3 μs │ 305.7 ms │
└─────────────┴──────────┴──────────┘

Prufer
┌────────────┬──────────┬──────────┬──────────┐
│    Name    │   100    │  10000   │ 1000000  │
╞════════════╪══════════╪══════════╪══════════╡
│ seqToGraph │ 3.107 μs │ 1.124 ms │ 552.9 ms │
├────────────┼──────────┼──────────┼──────────┤
│ graphToSeq │ 7.900 μs │ 2.835 ms │ 1.143 s  │
└────────────┴──────────┴──────────┴──────────┘

SegTree
┌─────────────┬──────────┬──────────┬──────────┐
│    Name     │   100    │  10000   │  500000  │
╞═════════════╪══════════╪══════════╪══════════╡
│ fromListST  │ 7.653 μs │ 2.004 ms │ 74.72 ms │
├─────────────┼──────────┼──────────┼──────────┤
│ adjustST    │ 11.34 μs │ 4.388 ms │ 849.1 ms │
├─────────────┼──────────┼──────────┼──────────┤
│ foldRangeST │ 6.802 μs │ 2.275 ms │ 165.4 ms │
└─────────────┴──────────┴──────────┴──────────┘

SegTreeLazy
┌────────────────┬──────────┬──────────┬──────────┐
│      Name      │   100    │  10000   │  200000  │
╞════════════════╪══════════╪══════════╪══════════╡
│ fromListLST    │ 8.208 μs │ 2.203 ms │ 40.78 ms │
├────────────────┼──────────┼──────────┼──────────┤
│ adjustLST      │ 18.10 μs │ 9.680 ms │ 526.5 ms │
├────────────────┼──────────┼──────────┼──────────┤
│ updateRangeLST │ 21.97 μs │ 15.81 ms │ 937.2 ms │
├────────────────┼──────────┼──────────┼──────────┤
│ foldRangeLST   │ 8.112 μs │ 2.617 ms │ 69.74 ms │
└────────────────┴──────────┴──────────┴──────────┘

Sort
┌────────────────┬──────────┬──────────┬──────────┐
│      Name      │   100    │  10000   │  500000  │
╞════════════════╪══════════╪══════════╪══════════╡
│ sort           │ 9.554 μs │ 2.182 ms │ 232.8 ms │
├────────────────┼──────────┼──────────┼──────────┤
│ sortU          │ 6.996 μs │ 1.522 ms │ 106.2 ms │
├────────────────┼──────────┼──────────┼──────────┤
│ Data.List.sort │ 9.321 μs │ 4.511 ms │ 871.9 ms │
└────────────────┴──────────┴──────────┴──────────┘

SparseTable
┌─────────────┬──────────┬──────────┬──────────┐
│    Name     │   100    │  10000   │  500000  │
╞═════════════╪══════════╪══════════╪══════════╡
│ fromArraySP │ 12.34 μs │ 8.079 ms │ 1.067 s  │
├─────────────┼──────────┼──────────┼──────────┤
│ fromListSP  │ 13.24 μs │ 8.417 ms │ 1.100 s  │
├─────────────┼──────────┼──────────┼──────────┤
│ querySP     │ 3.378 μs │ 958.6 μs │ 381.5 ms │
├─────────────┼──────────┼──────────┼──────────┤
│ query1SP    │ 1.525 μs │ 238.3 μs │ 70.29 ms │
└─────────────┴──────────┴──────────┴──────────┘

TwoSat
┌───────────┬──────────┬──────────┬──────────┐
│   Name    │   100    │  10000   │  200000  │
╞═══════════╪══════════╪══════════╪══════════╡
│ solve2Sat │ 39.86 μs │ 12.99 ms │ 777.2 ms │
└───────────┴──────────┴──────────┴──────────┘

ZFunc
┌─────────┬──────────┬──────────┬──────────┐
│  Name   │   100    │  10000   │ 1000000  │
╞═════════╪══════════╪══════════╪══════════╡
│ zFuncBS │ 2.056 μs │ 218.4 μs │ 21.19 ms │
└─────────┴──────────┴──────────┴──────────┘
